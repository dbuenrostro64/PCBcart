
blinkie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007bc  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000691  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000307  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_6>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_13>:
#define DDRB0 0
#define DDRB5 5
#define LEDy PB5

ISR(TIMER1_OVF_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
	//PORTB ^= (1<<LED) | (1<<LEDy);
	//TCNT1 = 49916;
}
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <__vector_6>:

ISR(WDT_vect)
{}
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <main>:

int main()
{
	DDRB = (0x01<<LED) | (0x01<<LEDy);
  a8:	81 e2       	ldi	r24, 0x21	; 33
  aa:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 49916;
  ac:	2c ef       	ldi	r18, 0xFC	; 252
  ae:	32 ec       	ldi	r19, 0xC2	; 194
  b0:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  b4:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00;
  b8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS10) | (1<<CS12);
  bc:	95 e0       	ldi	r25, 0x05	; 5
  be:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1<<TOIE1);
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei();
  c8:	78 94       	sei

	//watchdog timer
	WDTCSR = (0b00011000);
  ca:	e0 e6       	ldi	r30, 0x60	; 96
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	98 e1       	ldi	r25, 0x18	; 24
  d0:	90 83       	st	Z, r25
	WDTCSR = (33);
  d2:	80 83       	st	Z, r24
	WDTCSR |= (1<<6);
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24

	//sleep
	SMCR |= (1<<2);
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	83 bf       	out	0x33, r24	; 51
	SMCR |= 1;
  e0:	83 b7       	in	r24, 0x33	; 51
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	83 bf       	out	0x33, r24	; 51

	while(1)
	{
		PORTB ^= (1<<LED) | (1<<LEDy);
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	81 e2       	ldi	r24, 0x21	; 33
  ea:	98 27       	eor	r25, r24
  ec:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	33 ed       	ldi	r19, 0xD3	; 211
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	30 40       	sbci	r19, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x4c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x56>
  fe:	00 00       	nop
		_delay_ms(1000);
		PORTB ^= (1<<LED) | (1<<LEDy);
 100:	95 b1       	in	r25, 0x05	; 5
 102:	98 27       	eor	r25, r24
 104:	95 b9       	out	0x05, r25	; 5
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	33 ed       	ldi	r19, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x64>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x6e>
 116:	00 00       	nop
		_delay_ms(1000);
		PORTB ^= (1<<LED) | (1<<LEDy);
 118:	95 b1       	in	r25, 0x05	; 5
 11a:	98 27       	eor	r25, r24
 11c:	95 b9       	out	0x05, r25	; 5
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	33 ed       	ldi	r19, 0xD3	; 211
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	21 50       	subi	r18, 0x01	; 1
 126:	30 40       	sbci	r19, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x7c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x86>
 12e:	00 00       	nop
		_delay_ms(1000);
		PORTB ^= (1<<LED) | (1<<LEDy);
 130:	95 b1       	in	r25, 0x05	; 5
 132:	89 27       	eor	r24, r25
 134:	85 b9       	out	0x05, r24	; 5

		for(int i=0;i<4;i++)
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	84 30       	cpi	r24, 0x04	; 4
 13c:	91 05       	cpc	r25, r1
 13e:	9c f6       	brge	.-90     	; 0xe6 <main+0x3e>
		{
		__asm__ __volatile__("sleep");
 140:	88 95       	sleep
		_delay_ms(1000);
		PORTB ^= (1<<LED) | (1<<LEDy);
		_delay_ms(1000);
		PORTB ^= (1<<LED) | (1<<LEDy);

		for(int i=0;i<4;i++)
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	fa cf       	rjmp	.-12     	; 0x13a <main+0x92>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
