
PowerSave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000756  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000664  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_6>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 90 00 	call	0x120	; 0x120 <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_13>:
	WDTCSR = (0b00100001); //sets prescaler to 8s
	WDTCSR |= (1<<WDIE);// sets watchdog interrupt enable

	//sleep
	SMCR |= (1<<SM1); //sets
	SMCR |= (1<<SE); //sets
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	80 62       	ori	r24, 0x20	; 32
  92:	84 b9       	out	0x04, r24	; 4
  94:	95 b1       	in	r25, 0x05	; 5
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	89 27       	eor	r24, r25
  9a:	85 b9       	out	0x05, r24	; 5
  9c:	8c ef       	ldi	r24, 0xFC	; 252
  9e:	92 ec       	ldi	r25, 0xC2	; 194
  a0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  a4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <__vector_6>:
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <_Z10initTimer1v>:
}

void initTimer1()
{
	//init timer 1
	TCNT1 = 49916; //sets initial timer value
  ca:	8c ef       	ldi	r24, 0xFC	; 252
  cc:	92 ec       	ldi	r25, 0xC2	; 194
  ce:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00; //timer normal mode
  d6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<CS10) | (1<<CS12); //sets prescaler clk/1024
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1<<TOIE1);// enable overflow interrupt
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei(); // interrupts on
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <_Z7initPwmv>:
}

void initPwm()
{
	// Init Timer 0
	TCCR0A = 0;
  ea:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
  ec:	15 bc       	out	0x25, r1	; 37
	// FastPWM 8-bit mode
	TCCR0A |=  (1<<WGM01) | (1<<WGM00); // set OC0A/OC0B on compare match, clear at BOTTOM
  ee:	84 b5       	in	r24, 0x24	; 36
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0A1); // PD6
  f4:	84 b5       	in	r24, 0x24	; 36
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<COM0B1); // PD5
  fa:	84 b5       	in	r24, 0x24	; 36
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	84 bd       	out	0x24, r24	; 36
	
	TCCR0B |= (1<<CS02); // prescaler 1024
 100:	85 b5       	in	r24, 0x25	; 37
 102:	84 60       	ori	r24, 0x04	; 4
 104:	85 bd       	out	0x25, r24	; 37
	
	DDRD |= (1<<PORTD6) | (1<<PORTD5); // set OC0A & OC0B to output
 106:	8a b1       	in	r24, 0x0a	; 10
 108:	80 66       	ori	r24, 0x60	; 96
 10a:	8a b9       	out	0x0a, r24	; 10
 10c:	08 95       	ret

0000010e <_Z20motorPwmAndDirectionbi>:
}

void motorPwmAndDirection(bool direction, int pwmValue)
{
	if (direction == true)
 10e:	88 23       	and	r24, r24
 110:	11 f0       	breq	.+4      	; 0x116 <_Z20motorPwmAndDirectionbi+0x8>
	{
		OCR0A = 0;
 112:	17 bc       	out	0x27, r1	; 39
		OCR0B = pwmValue;
 114:	68 bd       	out	0x28, r22	; 40
	}
	if (direction == false)
 116:	81 11       	cpse	r24, r1
 118:	02 c0       	rjmp	.+4      	; 0x11e <_Z20motorPwmAndDirectionbi+0x10>
	{
		OCR0A = pwmValue;
 11a:	67 bd       	out	0x27, r22	; 39
		OCR0B = 0;
 11c:	18 bc       	out	0x28, r1	; 40
 11e:	08 95       	ret

00000120 <main>:
ISR(WDT_vect)
{}

int main()
{
	initTimer1();
 120:	0e 94 65 00 	call	0xca	; 0xca <_Z10initTimer1v>
	//initSleep();
	initPwm();
 124:	0e 94 75 00 	call	0xea	; 0xea <_Z7initPwmv>

	

	while(1)
	{
		motorPwmAndDirection(false,75);
 128:	6b e4       	ldi	r22, 0x4B	; 75
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 87 00 	call	0x10e	; 0x10e <_Z20motorPwmAndDirectionbi>
 132:	fa cf       	rjmp	.-12     	; 0x128 <main+0x8>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
